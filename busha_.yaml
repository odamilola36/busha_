swagger: "2.0"
info:
  description: "This is the api documentation for the busha assessment"
  version: "1.0.0"
  title: "Busha_"
  contact:
    email: "odamilola36@gmai.com"
tags:
  - name: "movies"
    description: "Everything about movies"
  - name: "comment"
    description: "comments actions"
  - name: "character"
    description: "Operations about character"
schemes:
  - "https"
  - "http"
paths:
  /movies:
    get:
      tags:
        - "movies"
      summary: "Get all movies from the api"
      description: ""
      operationId: "getMovies"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Ok"
        "405":
          description: "Method not supported"
        "500":
          description: "Internal server error"
  /comment:
    post:
      tags:
        - "comment"
      summary: "create comment for a movie"
      description: "method to add comment to a movie with specified Id"
      operationId: "create"
      produces:
        - "application/json"
      responses:
        "201":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Response"
        "400":
          description: "Invalid ID supplied"
          schema:
            $ref: "#/definitions/Response"
        "404":
          description: "Order not found"
          schema:
            $ref: "#/definitions/Response"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/Response"
  /comments/{movieId}:
    get:
      tags:
        - "comment"
      summary: "get all comments for a movie"
      description: "method to add comment to a movie with specified Id"
      operationId: "getAll"
      produces:
        - "application/json"
      parameters:
        - name: "movieId"
          in: "path"
          description: "ID of comment that needs to be fetched"
          required: true
          type: "integer"
          minimum: 1.0
          format: "int64"
      responses:
        "201":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Response"
        "400":
          description: "Invalid ID supplied"
          schema:
            $ref: "#/definitions/Response"
        "404":
          description: "Order not found"
          schema:
            $ref: "#/definitions/Response"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/Response"
  /comment/{commentId}/{movieId}:
    get:
      tags:
        - "comment"
      summary: "get comments by commentId and movieId"
      description: "Will return comment with specified id. For valid responses, id should > 0. if it doesn't exist, a 404 will be returned"
      operationId: "getCommentById"
      produces:
        - "application/json"
      parameters:
        - name: "commentId"
          in: "path"
          description: "ID of comment that needs to be fetched"
          required: true
          type: "integer"
          minimum: 1.0
          format: "int64"
        - name: "movieId"
          in: "path"
          description: "ID of comment that needs to be fetched"
          required: true
          type: "integer"
          minimum: 1.0
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Response"
        "400":
          description: "Invalid ID supplied"
          schema:
            $ref: "#/definitions/Response"
        "404":
          description: "Order not found"
          schema:
            $ref: "#/definitions/Response"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/Response"
  /comment/{commentId}:
    delete:
      tags:
        - "comment"
      summary: "Delete Comment by ID"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deleteComment"
      produces:
        - "application/json"
      parameters:
        - name: "commentId"
          in: "path"
          description: "ID of the comment that needs to be deleted"
          required: true
          type: "integer"
          minimum: 1.0
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Response"
        "400":
          description: "Invalid ID supplied"
          schema:
            $ref: "#/definitions/Response"
        "404":
          description: "Order not found"
          schema:
            $ref: "#/definitions/Response"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/Response"
    patch:
      tags:
        - "comment"
      summary: "update a comment"
      description: "Will update the comment with specified id. For valid responses, id should > 0. if it doesn't exist, a 404 will be returned, also, comment body should be 500 characters maximum"
      operationId: "updateComment"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "order placed for purchasing the pet"
          required: true
          schema:
            $ref: "#/definitions/Comment"
        - name: "commentId"
          in: "path"
          description: "ID of comment that needs to be patched"
          required: true
          type: "integer"
          minimum: 1.0
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Response"
        "400":
          description: "Invalid ID supplied"
          schema:
            $ref: "#/definitions/Response"
        "404":
          description: "Order not found"
          schema:
            $ref: "#/definitions/Response"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/Response"
  /characters/{movieId}:
    get:
      tags:
        - "character"
      summary: "characters endpoint"
      description: ""
      operationId: "getCharacters"
      produces:
        - "application/json"
      parameters:
        - name: "movieId"
          in: path
          description: "id of movie"
          required: true
          type: "integer"
          minimum: 1
          format: "int64"
        - name: "sort"
          in: query
          description: "key for sorting, valid values are name, height, gender"
          required: false
          type: "string"
        - name: "order"
          in: query
          description: "order of results, asc (ascending) or desc[default](descending)"
          required: false
          type: "string"
        - name: "filter"
          in: query
          description: "filter parameters based on gender values: male, female, n/a or blank(same as not sorting the responses at all)"
          required: false
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Response"
        "400":
          description: "Invalid ID supplied"
          schema:
            $ref: "#/definitions/Response"
        "404":
          description: "Character not found"
          schema:
            $ref: "#/definitions/Response"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/Response"
definitions:
  Response:
    type: "object"
    properties:
      status:
        type: "integer"
        format: "int64"
      error:
        type: "object"
        format: "date-time"
      message:
        type: "string"
        description: "status message"
      data:
        type: "object"
  Comment:
    type: "object"
    properties:
      movieId:
        type: "integer"
        format: "int"
      string:
        type: "string"